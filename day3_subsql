--group by/having
select * from employee;

select dept_code 
from employee
group by DEPT_CODE;

select dept_code, max(salary), min(salary)
from employee
group by dept_code;

--직급별 급여 평균
select job_code, to_char(floor(avg(salary)), 'fmL999,999,999') 급여평균
from employee group by job_code order by 1;

--성별별 인원수
--노란줄 나는 이유
--성별 부분을 group by에 똑같이 쓰면 사라진다.(권고사항)
select decode(substr(emp_no,8,1),1,'남',2,'여') 성별, count(*) 인원수
from employee group by substr(emp_no,8,1);

--입사년도별 인원수
select EXTRACT(year from hire_date) 입사년도, count(*) 인원수
from employee
group by EXTRACT(year from hire_date)
order by 입사년도;

--나이대별 급여 평균
select 
    case
        when substr(emp_no,1,2)>=80 then '80년대생'
        when substr(emp_no,1,2)>=70 then '70년대생'
        when substr(emp_no,1,2)>=60 then '60년대생'
    end 나이대별, 
    count(*)||'명' 인원,
    to_char(floor(avg(salary)),'fmL999,999,999') as 평균급여
from employee
group by 
    case
        when substr(emp_no,1,2)>=80 then '80년대생'
        when substr(emp_no,1,2)>=70 then '70년대생'
        when substr(emp_no,1,2)>=60 then '60년대생'
    end
order by 나이대별;

--업그레이드
--부서 내 직급별 인원수
select 
    nvl(dept_code,'인턴') 부서코드, 
    job_code,
    count(*)
from 
    employee
group by dept_code, job_code
order by 1;

--직급 내 성별별 인원수
select 
    job_code,
    decode(substr(emp_no,8,1),1,'남',2,'여') 성별,
    count(*)
from employee
group by job_code,
    substr(emp_no,8,1)
order by job_code,substr(emp_no,8,1);

--직급내 년차별 인원수
select 
    job_code,
    ceil(months_between(sysdate,hire_date)/12) 년차,
    count(*)||'명' 인원
from employee
group by job_code,
    ceil(months_between(sysdate,hire_date)/12)
order by job_code;

-----having절
---group by랑 함께 쓴다.
--부서별 급여 평균을 구했을 떄, 
--급여 평균이 300만원 이상인 부서의 정보만 출력
select
    dept_code,
    avg(salary)
from employee
group by dept_code
having avg(salary)>=3000000
order by 1;

--에러가 나는 이유
--group 함수 allowed here, 그룹함수는 여기에 허락되지 않아요
--1. where에는 그룹함수 쓸 수 없어서
--2. 실행 순서로 인해
--from -> where -> group by -> having -> select -> order by

--직급별 인원수가 3명 이하인 직급 정보만 출력
select job_code, count(*) 인원수
from employee
group by job_code
having count(*)<3
order by 1;

--자격증 rollup/cube
--join 한개 이상의 테이블을 병합해 유의미한 데이터셋을 만들어내는 문법
--job_code 그래서 그 코드 이름이 뭔데?
select * from department;
select * from employee;

select e.emp_name, d.dept_title
from employee e inner join department d
on e.dept_code = d.dept_id; --on : 이런 조건 상에서

--사원명, 사원번호, 직급명을 출력하세요
select emp_name, emp_id, job_name 
from EMPLOYEE e inner join JOB j
on e.job_code=j.job_code;

--총무부, 회계관리부인 사람들의 사워명 부서명 부서코드를 출력하세요.
select e.emp_name, d.dept_title, e.dept_code
from employee e inner join department d
on e.dept_code=d.dept_id
where d.dept_title in ('총무부','회계관리부');

--해외영업부의 직원들의 사번, 사원명 , 부서명, 부서코드, 연봉을 출력하세요
select e.emp_id, e.emp_name, d.dept_title, e.dept_code, e.salary*12 연봉
from employee e inner join department d
on e.dept_code=d.dept_id
where d.dept_title like '해외영업%';

--outer join
select 
    emp_name,
    nvl(dept_title, '인턴') 
from employee e full join department d
on e.dept_code=d.dept_id;

--전 부서원의 사원명, 부서명, 급여, 보너스율을 출력하세요
select
    e.emp_name,
    d.dept_title,
    e.salary,
    e.bonus
from employee e left join department d
on e.dept_code=d.dept_id;


--기술지원부를 제외한 모든 부서직원의 사번, 사원명, 부서명, 연봉을 출력하세요
--부서명이 없는 직원들은 부서명을 미정이라고 출력
--정렬은 부서명, 사번, 연봉 오른차순 정렬
select 
    emp_id,
    emp_name,
    nvl(dept_title, '미정') 부서명,
    salary*12 연봉
from employee e left join department d
on e.dept_code=d.dept_id
where nvl(dept_title, '미정') <> '기술지원부'
--where nvl(dept_title, '미정') != '기술지원부'
--where dept_title <> '기술지원부' or dept_title is null
order by d.dept_title, e.emp_id, e.salary;

--employee table의 사원번호, 사원명, 직속상사명
select * from employee;

select e1.emp_id, e1.emp_name, e1.manager_id, e2.emp_name
from employee e1 left join employee e2
on e1.manager_id=e2.emp_id; 
--걸러지는 결과는 e2에 저장된다?
--select e.emp_id, e.emp_name, m.emp_id, m.emp_name도 가능


--다중 join
--사원번호, 사원명, 부서명, 직급명
select
    emp_id,
    emp_name,
    dept_title,
    job_name
from employee e 
left join department d on e.dept_code=d.dept_id
join job j on e.job_code=j.job_code
order by 1;

--department-location_id, location-national_code
select
    emp_id,
    emp_name,
    dept_title 부서명,
    national_name 국가명
from employee e
full join department d on e.dept_code=d.dept_id
full join location l on d.location_id=l.local_code
full join national n on l.national_code=n.national_code;
--full로해서 null 고민해보기

--quiz
--1
select to_char(to_date('2020/12/25', 'YYYY/MM/DD'), 'yyyy/mm/dd(day)')from dual;

--2.
select 
    emp_name,
    emp_no,
    dept_title,
    job_name
from employee e 
left join DEPARTMENT d on e.dept_code=d.DEPT_ID
join JOB j on e.JOB_CODE=j.JOB_CODE
where substr(emp_no,8,1)=2
and substr(emp_no,1,1) =7
and emp_name like '전%';

--3 전형돈
select 
    emp_id,
    emp_name,
    dept_title
from employee e 
left join DEPARTMENT d on e.dept_code=d.DEPT_ID
where emp_name like '%형%';

--4
select dept_title, floor(avg(salary)) 평균급여
from employee e
join DEPARTMENT d on e.dept_code=d.DEPT_ID
group by dept_title
having avg(salary)<=3000000;

--5
select e.emp_name, j.JOB_NAME, e.dept_code, d.DEPT_TITLE
from EMPLOYEE e
join DEPARTMENT d on e.dept_code=d.DEPT_ID
join JOB j on e.JOB_CODE=j.JOB_CODE
where dept_title like '해외영업%';

--6
select emp_name, bonus, dept_title
from employee e
join DEPARTMENT d on e.dept_code=d.DEPT_ID
where bonus is not null;

--7
select e.emp_name, j.JOB_NAME, d.DEPT_TITLE, l.LOCAL_NAME
from employee e
left join JOB j on e.JOB_CODE=j.JOB_CODE
left join department d on e.dept_code=d.dept_id
left join location l on d.location_id=l.local_code;
--full join national n on l.national_code=n.national_code;

--8
select e.emp_name, d.DEPT_TITLE, l.LOCAL_NAME,n.NATIONAL_NAME
from employee e
left join JOB j on e.JOB_CODE=j.JOB_CODE
left join department d on e.dept_code=d.dept_id
left join location l on d.location_id=l.local_code
join national n on l.national_code=n.national_code
where n.national_name in ('한국', '일본');

--9
select e1.emp_name, d.DEPT_TITLE, e2.emp_name
from employee e1 
join employee e2 on e1.MANAGER_ID=e2.emp_id
join department d on e1.dept_code=d.dept_id
where e2.EMP_NAME='선동일';

--10
select emp_name, j.JOB_NAME, e.salary
from employee e
join JOB j on e.job_code=j.JOB_CODE
where bonus is null 
and j.JOB_NAME in ('차장','사원');

--11
select decode(ent_yn, 'N', '재직중', 'Y', '퇴사') 퇴사여부,
    count(*)
from employee
group by ent_yn;

--12 부서 내 직급별 인원수
select nvl(d.dept_title,'Intern') 부서, 
job_name 직급, 
count(*)||'명' 인원수
from employee e
left join department d on e.dept_code=d.dept_id
join JOB j on e.job_code=j.JOB_CODE
group by nvl(d.dept_title,'Intern'), j.job_name
order by 1;
    










